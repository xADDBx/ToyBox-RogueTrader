using Kingmaker;using ToyBox.Infrastructure;using TurnBased.Controllers;namespace ToyBox.Features.BagOfTricks.Cheats;[HarmonyPatch, HarmonyPatchCategory("ToyBox.Features.BagOfTricks.Cheats.InfiniteActionsFeature")]public partial class InfiniteActionsFeature : FeatureWithPatch {    protected override string HarmonyName => "ToyBox.Features.BagOfTricks.Cheats.InfiniteActionsFeature";    public override ref bool IsEnabled => ref Settings.ToggleInfiniteActionsPerTurn;    [LocalizedString("ToyBox_Features_BagOfTricks_Cheats_InfiniteActionsFeature_Name", "Unlimited Actions During Turn")]    public override partial string Name { get; }
    [LocalizedString("ToyBox_Features_BagOfTricks_Cheats_InfiniteActionsFeature_Description", "Allows you to do any kind of action infinitely during Turn Based combat")]    public override partial string Description { get; }
    [HarmonyPatch(typeof(TurnController), nameof(TurnController.Tick)), HarmonyPostfix]    private static void UnitCommand_OnEnded_Patch(TurnController __instance) {        if (CombatController.IsInTurnBasedCombat()) {            var unit = __instance?.Rider;            if (ToyBoxUnitHelper.IsPartyOrPet(unit)) {                var cds = unit!.CombatState.Cooldown;                if (cds.SwiftAction != 0 || cds.MoveAction != 0 || cds.StandardAction != 0 || unit.CombatState.TBM.TimeMoved > 0) {                    cds.Clear();                    bool isSurprising = Game.Instance.TurnBasedCombatController.IsSurprising(unit);                    __instance!.m_RiderActionState = new(__instance.ComputeCurrentActionStates(unit), isSurprising);                    __instance!.m_RiderMovementStats = new();                }            }            unit = __instance?.Mount;            if (ToyBoxUnitHelper.IsPartyOrPet(unit)) {                var cds = unit!.CombatState.Cooldown;                if (cds.SwiftAction != 0 || cds.MoveAction != 0 || cds.StandardAction != 0 || unit.CombatState.TBM.TimeMoved > 0) {                    cds.Clear();                    bool isSurprising = Game.Instance.TurnBasedCombatController.IsSurprising(unit);                    __instance!.m_MountActionState = new(__instance.ComputeCurrentActionStates(unit), isSurprising);                    __instance!.m_MountMovementStats = new();                }            }        }    }}